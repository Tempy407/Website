---
title: "Project 2"
author: "April Baik(ajb5328)"
date: "11/26/2019"
output: html_document
---



<div id="modeling" class="section level2">
<h2>Modeling</h2>
<ul>
<li><strong>0. (Introduction)</strong></li>
</ul>
<p>Pokemon has been apart of our generation offering a wide variety of games and T.V shows for entertainment. A fictitious world containing monsters and battles, motivates each player to capture and train each Pokemon. With each new installment, a new generation of Pokemon are introduced widening the variety of the Pokemon population. This data set contains all the Pokemon up to Generation Six. It contains the maximum points for health, attack, defense, and speed. The dataset also contains the Generation number, Legendary status, gender, height(m), and weight(kg). “Type_2” was dropped because we will primarily focus on the “Type_1” of the pokemon. Speed attack and Speed Defense were also dropped since this contains more specific character statistics that we are not concerned with. The Egg groups, Mega Evolution, catch rate, and body style were also dropped since we are focusing on statistics related to the Pokemon and not statistics within the game.</p>
<pre class="r"><code>library(dplyr)
library(tidyverse)
library(readr)
Pokemon &lt;- read_csv(&quot;pokemon_alopez247[1].csv&quot;)
Poke &lt;- Pokemon %&gt;% select(-Total,-Sp_Atk,-Sp_Def,-Type_2,-Pr_Male,-Egg_Group_1,-Egg_Group_2, -hasMegaEvolution, -Catch_Rate,-Body_Style, -Color)%&gt;%mutate(Generation=recode(Generation, &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;,&quot;Four&quot;, &quot;Five&quot;,&quot;Six&quot;))</code></pre>
<ul>
<li><strong>1. (MANOVA)</strong></li>
</ul>
<pre class="r"><code>#MANOVA
Man1 &lt;- manova(cbind(HP, Attack, Defense, Speed, Height_m, Weight_kg)~Type_1, data=Poke)
summary(Man1)</code></pre>
<pre><code>## Df Pillai approx F num Df den Df Pr(&gt;F)
## Type_1 17 0.58278 4.4487 102 4218 &lt; 2.2e-16 ***
## Residuals 703
## ---
## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1
&#39; &#39; 1</code></pre>
<pre class="r"><code>#Univariate ANOVAs
summary.aov(Man1)</code></pre>
<pre><code>## Response HP :
## Df Sum Sq Mean Sq F value Pr(&gt;F)
## Type_1 17 25590 1505.27 2.3234 0.001885 **
## Residuals 703 455466 647.89
## ---
## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1
&#39; &#39; 1
##
## Response Attack :
## Df Sum Sq Mean Sq F value Pr(&gt;F)
## Type_1 17 76359 4491.7 5.9747 5.153e-13 ***
## Residuals 703 528512 751.8
## ---
## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1
&#39; &#39; 1
##
## Response Defense :
## Df Sum Sq Mean Sq F value Pr(&gt;F)
## Type_1 17 119226 7013.3 9.8855 &lt; 2.2e-16 ***
## Residuals 703 498742 709.4
## ---
## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1
&#39; &#39; 1
##
## Response Speed :
## Df Sum Sq Mean Sq F value Pr(&gt;F)
## Type_1 17 48536 2855.05 4.1196 5.863e-08 ***
## Residuals 703 487205 693.04
## ---
## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1
&#39; &#39; 1
##
## Response Height_m :
## Df Sum Sq Mean Sq F value Pr(&gt;F)
## Type_1 17 44.04 2.5905 2.4567 0.0009333 ***
## Residuals 703 741.27 1.0544
## ---
## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1
&#39; &#39; 1
##
## Response Weight_kg :
## Df Sum Sq Mean Sq F value Pr(&gt;F)
## Type_1 17 676268 39780 5.5497 7.647e-12 ***
## Residuals 703 5039119 7168
## ---
## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1
&#39; &#39; 1</code></pre>
<pre class="r"><code>#Mean Differences
Poke%&gt;%group_by(Type_1)%&gt;%summarize(mean(HP), mean(Attack), mean(Defense), mean(Speed), mean(Height_m), mean(Weight_kg))</code></pre>
<pre><code>## # A tibble: 18 x 7
## Type_1 `mean(HP)` `mean(Attack)` `mean(Defense)`
`mean(Speed)` `mean(Height_m)` `mean(Weight_kg…
## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
## 1 Bug 56.0 65.2 67.7 60.1 0.859 29.3
## 2 Dark 67.2 86.2 67.9 75.4 1.15 39.8
## 3 Dragon 78.0 103.  79.1 76.7 2.04 115.
## 4 Electr… 59.5 67.8 59.1 83.5 0.895 37.4
## 5 Fairy 74.1 61.5 65.7 48.6 0.835 24.9
## 6 Fighti… 70.2 94.7 64.3 62.9 1.17 54.9
## 7 Fire 68.6 82.2 64.9 74.4 1.16 64.0
## 8 Flying 68 71.7 61.7 96.3 1.17 52
## 9 Ghost 61.6 67.5 76.0 60.8 1.30 53.8
## 10 Grass 66.2 70.9 69.4 59.9 0.984 38.1
## 11 Ground 72.4 91.3 82.2 62.1 1.21 105.
## 12 Ice 71.7 70.7 71.0 61.9 1.21 103.
## 13 Normal 76.5 71.7 57.8 69.7 0.980 43.2
## 14 Poison 67.2 74.7 68.8 63.6 1.22 36.6
## 15 Psychic 70.6 61.3 65.0 72.6 0.949 29.6
## 16 Rock 64.5 88.5 99.8 51.9 1.32 101.
## 17 Steel 64.8 83.5 119.  54.2 1.59 157.
## 18 Water 70.9 71.0 70.5 65.0 1.32 53.6</code></pre>
<pre class="r"><code>#Post-Hoc T-tests
pairwise.t.test(Poke$HP,Poke$Type_1,p.adj=&quot;none&quot;)</code></pre>
<pre><code>##
## Pairwise comparisons using t tests with pooled SD
##
## data: Poke$HP and Poke$Type_1
##
## Bug Dark Dragon Electric Fairy Fighting Fire Flying
Ghost Grass Ground
## Dark 0.05256 - - - - - - - - - -
## Dragon 0.00032 0.12543 - - - - - - - - -
## Electric 0.50493 0.23163 0.00585 - - - - - - - -
## Fairy 0.00921 0.37557 0.62689 0.05140 - - - - - - -
## Fighting 0.01783 0.66217 0.28384 0.10552 0.62811 - - - -
- -
## Fire 0.01017 0.81566 0.13954 0.10710 0.44363 0.79420 - -
- - -
## Flying 0.42343 0.95765 0.51964 0.57859 0.70124 0.88552
0.96866 - - - -
## Ghost 0.36570 0.43350 0.02685 0.76125 0.12357 0.23857
0.27810 0.68059 - - -
## Grass 0.02261 0.86428 0.05131 0.20456 0.25297 0.49903
0.62163 0.90452 0.45260 - -
## Ground 0.00369 0.43526 0.41860 0.04072 0.82415 0.75410
0.52267 0.77537 0.12502 0.26878 -
## Ice 0.01156 0.53247 0.38993 0.07412 0.76210 0.84778
0.63716 0.81525 0.17942 0.37640 0.91561
## Normal 9.1e-07 0.08887 0.79499 0.00069 0.71982 0.27329
0.08211 0.56812 0.01182 0.01191 0.44026
## Poison 0.05108 0.99163 0.12793 0.22732 0.38051 0.66958
0.82479 0.96133 0.42768 0.85451 0.44157
## Psychic 0.00290 0.57167 0.24536 0.04901 0.62716 0.95230
0.70039 0.86297 0.16271 0.36323 0.76446
## Rock 0.09326 0.67215 0.03935 0.38660 0.19237 0.37752
0.45576 0.82010 0.65422 0.74298 0.19893
## Steel 0.16002 0.74491 0.07883 0.44033 0.25828 0.46645
0.56581 0.83911 0.66838 0.82591 0.28897
## Water 0.00025 0.49594 0.21322 0.02106 0.62532 0.91194
0.61136 0.84753 0.11290 0.24324 0.77115
## Ice Normal Poison Psychic Rock Steel
## Dark - - - - - -
## Dragon - - - - - -
## Electric - - - - - -
## Fairy - - - - - -
## Fighting - - - - - -
## Fire - - - - - -
## Flying - - - - - -
## Ghost - - - - - -
## Grass - - - - - -
## Ground - - - - - -
## Ice - - - - - -
## Normal 0.41114 - - - - -
## Poison 0.53903 0.09133 - - - -
## Psychic 0.87307 0.19494 0.57968 - - -
## Rock 0.28361 0.01220 0.66382 0.26401 - -
## Steel 0.36826 0.05275 0.73747 0.37812 0.96662 -
## Water 0.89340 0.11882 0.50432 0.95545 0.17732 0.31120
##
## P value adjustment method: none</code></pre>
<pre class="r"><code>pairwise.t.test(Poke$Attack,Poke$Type_1,p.adj=&quot;none&quot;)</code></pre>
<pre><code>##
## Pairwise comparisons using t tests with pooled SD
##
## data: Poke$Attack and Poke$Type_1
##
## Bug Dark Dragon Electric Fairy Fighting Fire Flying
Ghost Grass Ground
## Dark 0.00077 - - - - - - - - - -
## Dragon 1.9e-08 0.03214 - - - - - - - - -
## Electric 0.65566 0.00768 1.7e-06 - - - - - - - -
## Fairy 0.62232 0.00347 2.7e-06 0.43897 - - - - - - -
## Fighting 6.3e-06 0.26197 0.31339 0.00017 0.00013 - - - -
- -
## Fire 0.00136 0.53758 0.00311 0.01772 0.00787 0.06579 - -
- - -
## Flying 0.69095 0.38159 0.06563 0.81348 0.55512 0.16924
0.51855 - - - -
## Ghost 0.73076 0.01547 1.3e-05 0.97210 0.49465 0.00063
0.03560 0.80555 - - -
## Grass 0.23938 0.01334 1.5e-06 0.58168 0.20890 0.00023
0.03111 0.96268 0.61006 - -
## Ground 2.1e-05 0.48359 0.13195 0.00055 0.00037 0.64523
0.15657 0.23740 0.00183 0.00077 -
## Ice 0.41284 0.04419 7.3e-05 0.69026 0.29629 0.00251
0.09925 0.95401 0.69477 0.97436 0.00686
## Normal 0.14616 0.01427 1.1e-06 0.46286 0.15881 0.00021
0.03302 0.99680 0.50995 0.85227 0.00071
## Poison 0.12935 0.11477 0.00027 0.31822 0.11928 0.00808
0.25011 0.85656 0.35397 0.54235 0.02135
## Psychic 0.45555 0.00015 3.0e-09 0.28474 0.97402 1.0e-06
0.00023 0.52476 0.37106 0.06609 3.4e-06
## Rock 2.7e-05 0.74205 0.04486 0.00100 0.00070 0.36883
0.28644 0.30607 0.00348 0.00134 0.66689
## Steel 0.00713 0.72928 0.01867 0.03393 0.01313 0.16371
0.85081 0.48171 0.05043 0.06162 0.31401
## Water 0.18291 0.00933 4.6e-07 0.53713 0.18466 0.00011
0.02061 0.96925 0.57664 0.97435 0.00038
## Ice Normal Poison Psychic Rock Steel
## Dark - - - - - -
## Dragon - - - - - -
## Electric - - - - - -
## Fairy - - - - - -
## Fighting - - - - - -
## Fire - - - - - -
## Flying - - - - - -
## Ghost - - - - - -
## Grass - - - - - -
## Ground - - - - - -
## Ice - - - - - -
## Normal 0.87121 - - - - -
## Poison 0.60588 0.61817 - - - -
## Psychic 0.17746 0.03348 0.04098 - - -
## Rock 0.01310 0.00119 0.04067 4.2e-06 - -
## Steel 0.11652 0.06957 0.25673 0.00174 0.49756 -
## Water 0.95555 0.86107 0.53374 0.04268 0.00060 0.05230
##
## P value adjustment method: none</code></pre>
<pre class="r"><code>pairwise.t.test(Poke$Defense,Poke$Type_1,p.adj=&quot;none&quot;)</code></pre>
<pre><code>##
## Pairwise comparisons using t tests with pooled SD
##
## data: Poke$Defense and Poke$Type_1
##
## Bug Dark Dragon Electric Fairy Fighting Fire Flying
Ghost Grass Ground
## Dark 0.96966 - - - - - - - - - -
## Dragon 0.07414 0.13120 - - - - - - - - -
## Electric 0.12204 0.18796 0.00443 - - - - - - - -
## Fairy 0.78439 0.78616 0.11245 0.39846 - - - - - - -
## Fighting 0.58733 0.61877 0.05154 0.45386 0.86483 - - - -
- -
## Fire 0.58500 0.63330 0.03355 0.32501 0.91422 0.92588 - -
- - -
## Flying 0.70168 0.69888 0.28483 0.87183 0.80872 0.87247
0.83884 - - - -
## Ghost 0.20357 0.28452 0.68364 0.01790 0.22929 0.12964
0.10309 0.38242 - - -
## Grass 0.72274 0.81126 0.12463 0.06291 0.61378 0.41666
0.37955 0.62463 0.30702 - -
## Ground 0.01458 0.04230 0.67682 0.00048 0.04215 0.01338
0.00567 0.20414 0.40049 0.02937 -
## Ice 0.60637 0.67785 0.29879 0.09298 0.53117 0.37977
0.36454 0.56649 0.53183 0.79458 0.13231
## Normal 0.02300 0.07803 0.00050 0.80554 0.26060 0.28024
0.13693 0.80439 0.00352 0.00713 1.5e-05
## Poison 0.85279 0.90022 0.16478 0.14724 0.70374 0.53569
0.53696 0.65850 0.34147 0.92811 0.05696
## Psychic 0.60509 0.65006 0.03544 0.31277 0.92991 0.90796
0.97838 0.83151 0.10780 0.39562 0.00609
## Rock 3.2e-09 1.4e-06 0.00267 4.7e-11 1.1e-05 2.0e-07
1.5e-09 0.01707 0.00064 1.4e-08 0.00614
## Steel 1.7e-14 2.5e-11 3.9e-07 3.1e-16 7.4e-10 3.5e-12
9.1e-15 0.00046 6.2e-08 7.5e-14 8.0e-07
## Water 0.51162 0.65185 0.15214 0.02698 0.49267 0.29548
0.23199 0.57194 0.37261 0.78864 0.03449
## Ice Normal Poison Psychic Rock Steel
## Dark - - - - - -
## Dragon - - - - - -
## Electric - - - - - -
## Fairy - - - - - -
## Fighting - - - - - -
## Fire - - - - - -
## Flying - - - - - -
## Ghost - - - - - -
## Grass - - - - - -
## Ground - - - - - -
## Ice - - - - - -
## Normal 0.03304 - - - - -
## Poison 0.76697 0.05522 - - - -
## Psychic 0.37626 0.12890 0.55251 - - -
## Rock 3.9e-05 2.4e-16 2.6e-06 1.8e-09 - -
## Steel 1.9e-09 &lt; 2e-16 5.3e-11 1.1e-14 0.00538 -
## Water 0.92755 0.00086 0.76902 0.24465 3.8e-09 1.8e-14
##
## P value adjustment method: none</code></pre>
<pre class="r"><code>pairwise.t.test(Poke$Speed,Poke$Type_1,p.adj=&quot;none&quot;)</code></pre>
<pre><code>##
## Pairwise comparisons using t tests with pooled SD
##
## data: Poke$Speed and Poke$Type_1
##
## Bug Dark Dragon Electric Fairy Fighting Fire Flying
Ghost Grass Ground
## Dark 0.01056 - - - - - - - - - -
## Dragon 0.00874 0.86196 - - - - - - - - -
## Electric 2.3e-05 0.22048 0.32300 - - - - - - - -
## Fairy 0.11118 0.00098 0.00081 7.6e-06 - - - - - - -
## Fighting 0.65096 0.08454 0.06729 0.00268 0.08462 - - - -
- -
## Fire 0.00491 0.87238 0.72962 0.11724 0.00057 0.07797 - -
- - -
## Flying 0.02001 0.19083 0.22290 0.41852 0.00390 0.03791
0.16190 - - - -
## Ghost 0.90538 0.04966 0.03956 0.00129 0.14656 0.78721
0.04338 0.02833 - - -
## Grass 0.97084 0.00924 0.00769 1.7e-05 0.11479 0.62925
0.00405 0.01932 0.88378 - -
## Ground 0.72311 0.05567 0.04420 0.00106 0.09054 0.91661
0.04685 0.03226 0.85786 0.69938 -
## Ice 0.77833 0.06836 0.05447 0.00214 0.11517 0.89435
0.06219 0.03330 0.89311 0.75670 0.97117
## Normal 0.02586 0.31239 0.24516 0.00744 0.00250 0.25363
0.31605 0.08451 0.15023 0.02152 0.17397
## Poison 0.55761 0.09337 0.07417 0.00272 0.06458 0.92398
0.08582 0.04088 0.71107 0.53586 0.83537
## Psychic 0.01391 0.65396 0.53573 0.06072 0.00134 0.13729
0.73921 0.13008 0.07991 0.01183 0.09010
## Rock 0.12393 0.00030 0.00027 2.0e-07 0.66034 0.10153
7.2e-05 0.00493 0.19485 0.12848 0.10704
## Steel 0.36727 0.00482 0.00393 4.3e-05 0.51076 0.25875
0.00307 0.00947 0.39766 0.37842 0.28226
## Water 0.23882 0.06410 0.05073 0.00029 0.01730 0.71635
0.04285 0.04252 0.49026 0.21648 0.59784
## Ice Normal Poison Psychic Rock Steel
## Dark - - - - - -
## Dragon - - - - - -
## Electric - - - - - -
## Fairy - - - - - -
## Fighting - - - - - -
## Fire - - - - - -
## Flying - - - - - -
## Ghost - - - - - -
## Grass - - - - - -
## Ground - - - - - -
## Ice - - - - - -
## Normal 0.20448 - - - - -
## Poison 0.81837 0.28400 - - - -
## Psychic 0.11050 0.53581 0.15243 - - -
## Rock 0.14757 0.00035 0.07162 0.00026 - -
## Steel 0.32780 0.01340 0.21102 0.00700 0.74595 -
## Water 0.60456 0.21558 0.79738 0.10200 0.00713 0.07984
##
## P value adjustment method: none</code></pre>
<pre class="r"><code>pairwise.t.test(Poke$Height_m,Poke$Type_1,p.adj=&quot;none&quot;)</code></pre>
<pre><code>##
## Pairwise comparisons using t tests with pooled SD
##
## data: Poke$Height_m and Poke$Type_1
##
## Bug Dark Dragon Electric Fairy Fighting Fire Flying
Ghost Grass Ground
## Dark 0.21912 - - - - - - - - - -
## Dragon 2.0e-06 0.00185 - - - - - - - - -
## Electric 0.86754 0.33221 2.7e-05 - - - - - - - -
## Fairy 0.93212 0.32530 0.00024 0.84343 - - - - - - -
## Fighting 0.20314 0.93704 0.00312 0.30681 0.30247 - - - -
- -
## Fire 0.12448 0.94296 0.00072 0.23797 0.25898 0.98499 - -
- - -
## Flying 0.60869 0.96941 0.16755 0.65598 0.60288 0.99797
0.99167 - - - -
## Ghost 0.07762 0.59130 0.01409 0.13871 0.15638 0.65432
0.59841 0.83505 - - -
## Grass 0.48907 0.48534 1.9e-05 0.67449 0.59361 0.44570
0.36079 0.75955 0.20288 - -
## Ground 0.12652 0.81950 0.00323 0.21847 0.23267 0.88775
0.85441 0.95171 0.74224 0.32375 -
## Ice 0.16494 0.83318 0.00565 0.25547 0.25818 0.89664
0.86832 0.95326 0.75545 0.37103 0.99801
## Normal 0.47160 0.45306 7.8e-06 0.67376 0.59361 0.41542
0.31778 0.75239 0.17935 0.97828 0.29113
## Poison 0.12758 0.80176 0.00405 0.21660 0.22952 0.86905
0.83404 0.94251 0.76529 0.31972 0.97833
## Psychic 0.65043 0.42157 2.6e-05 0.81261 0.69589 0.38822
0.31118 0.71782 0.17793 0.85648 0.28131
## Rock 0.02435 0.47958 0.00694 0.06771 0.09932 0.55022
0.46469 0.80190 0.93198 0.09658 0.63698
## Steel 0.00437 0.13277 0.13600 0.01308 0.02381 0.16425
0.11145 0.51023 0.35224 0.01752 0.18932
## Water 0.00490 0.42306 0.00209 0.03200 0.07075 0.50409
0.38236 0.80160 0.93315 0.03719 0.59365
## Ice Normal Poison Psychic Rock Steel
## Dark - - - - - -
## Dragon - - - - - -
## Electric - - - - - -
## Fairy - - - - - -
## Fighting - - - - - -
## Fire - - - - - -
## Flying - - - - - -
## Ghost - - - - - -
## Grass - - - - - -
## Ground - - - - - -
## Ice - - - - - -
## Normal 0.34267 - - - - -
## Poison 0.97780 0.28853 - - - -
## Psychic 0.32377 0.86628 0.27814 - - -
## Rock 0.66147 0.07415 0.66474 0.08773 - -
## Steel 0.21577 0.01296 0.20472 0.01652 0.33426 -
## Water 0.62924 0.01989 0.62713 0.03926 0.98733 0.27104
##
## P value adjustment method: none</code></pre>
<pre class="r"><code>pairwise.t.test(Poke$Weight_kg,Poke$Type_1,p.adj=&quot;none&quot;)</code></pre>
<pre><code>##
## Pairwise comparisons using t tests with pooled SD
##
## data: Poke$Weight_kg and Poke$Type_1
##
## Bug Dark Dragon Electric Fairy Fighting Fire Flying
Ghost Grass Ground
## Dark 0.58168 - - - - - - - - - -
## Dragon 2.8e-05 0.00150 - - - - - - - - -
## Electric 0.64324 0.91036 0.00055 - - - - - - - -
## Fairy 0.85171 0.56656 0.00084 0.61536 - - - - - - -
## Fighting 0.19996 0.51781 0.01339 0.42810 0.26005 - - - -
- -
## Fire 0.03368 0.23300 0.01674 0.15758 0.10359 0.66592 - -
- - -
## Flying 0.64947 0.81332 0.22537 0.77493 0.60972 0.95494
0.81230 - - - -
## Ghost 0.23412 0.55803 0.01363 0.46922 0.28641 0.96379
0.63725 0.97218 - - -
## Grass 0.55269 0.92738 0.00015 0.96991 0.56709 0.39801
0.10987 0.78115 0.44391 - -
## Ground 6.5e-05 0.00366 0.66058 0.00137 0.00198 0.03017
0.03980 0.30408 0.03036 0.00038 -
## Ice 0.00036 0.00796 0.63733 0.00370 0.00394 0.04854
0.06867 0.32431 0.04803 0.00155 0.95021
## Normal 0.31421 0.85594 0.00023 0.73093 0.41432 0.53774
0.17002 0.85885 0.58931 0.71075 0.00057
## Poison 0.70162 0.88658 0.00093 0.96913 0.65330 0.43234
0.17635 0.76503 0.47080 0.93792 0.00229
## Psychic 0.98262 0.61244 6.6e-05 0.67597 0.84511 0.22744
0.04947 0.65706 0.26158 0.59892 0.00016
## Rock 2.9e-05 0.00345 0.51561 0.00111 0.00198 0.03323
0.04243 0.33593 0.03365 0.00021 0.84539
## Steel 1.9e-09 1.5e-06 0.09336 2.4e-07 1.7e-06 4.2e-05
2.4e-05 0.04448 5.0e-05 1.8e-08 0.02846
## Water 0.07183 0.44617 0.00143 0.32429 0.19592 0.94299
0.48418 0.97464 0.99031 0.24523 0.00363
## Ice Normal Poison Psychic Rock Steel
## Dark - - - - - -
## Dragon - - - - - -
## Electric - - - - - -
## Fairy - - - - - -
## Fighting - - - - - -
## Fire - - - - - -
## Flying - - - - - -
## Ghost - - - - - -
## Grass - - - - - -
## Ground - - - - - -
## Ice - - - - - -
## Normal 0.00239 - - - - -
## Poison 0.00530 0.72006 - - - -
## Psychic 0.00067 0.37120 0.72864 - - -
## Rock 0.90970 0.00031 0.00208 9.2e-05 - -
## Steel 0.03398 2.1e-08 7.8e-07 8.9e-09 0.01233 -
## Water 0.01101 0.38809 0.34675 0.10715 0.00257 2.6e-07
##
## P value adjustment method: none</code></pre>
<p>We ran 1 MANOVA, 6 ANOVA, and 108 t-tests. This came to a total of 115 tests. The adjusted alpha level is 0.05/115 = 0.00435. Through the MANOVA test we found a significant difference between 18 types of Pokemon on 17 dependent measures. The Pillai Trace=0.58, the pseudo F(102, 4218), thus the p value was less than 0.001 making it significant. Next we performed ANOVAs for each dependent variable in order to find the mean difference across groups. The results displayed that there was a significant difference in the mean HP(p &lt;0.01), Attack(p&lt;0.001), Defense(p&lt;0.001), Speed(p&lt;0.001), Height(p&lt;0.001), and Weight(p&lt;0.001) between the types of Pokemon. A series of post-hoc t tests were performed in order to find which groups differ. Normal and Bug type Pokemon displayed a significant difference in the mean HP. Bug, Dragon, Fighting, Ground, Rock, Water, Psychic, Normal, Ice, Grass, Ghost, Fairy, and Electric type Pokemon displayed a significant difference in mean Speed. Rock and Steel type Pokemon displayed a significant difference for mean Defense. Electric, Grass, Steel, and Bug type Pokemon displayed a significant difference in mean Speed. Psychic, Grass, Electric, and Dragon type Pokemon displayed a significant difference in mean Height. Lastly, only Steel type Pokemon displayed a significant difference in mean Weight. These differences were found after adjusting for multiple comparisons through the Bonferroni method. The probability of a type one error is equal to alpha, which is 0.05. The adjusted significance level is 0.00435. The assumptions of MANOVA in relation to random sampling/independent observations, homogeneity, and multicollinearity were unlikely met.</p>
<ul>
<li><strong>2. Randomization Tests</strong></li>
</ul>
<pre class="r"><code>#Computation of Observed F
dist &lt;- Poke%&gt;%select(Attack,Defense)%&gt;%dist()
SST &lt;- sum(dist^2)/721
SSW &lt;-Poke%&gt;%group_by(Generation)%&gt;%select(Attack,Defense)%&gt;%do(d=dist(.[2:3],&quot;euclidean&quot;))%&gt;%ungroup()%&gt;%summarize(sum(d[[1]]^2)/151 + sum(d[[2]]^2)/100 + sum(d[[3]]^2)/135 + sum(d[[4]]^2)/107 + sum(d[[5]]^2)/156 + sum(d[[6]]^2)/72) %&gt;%pull
F_OB&lt;-((SST-SSW)/5)/(SSW/715) 
F_OB</code></pre>
<pre><code>## [1] -3.732512</code></pre>
<pre class="r"><code>#Null Distribution of F
Fs&lt;-replicate(1000,{
new&lt;-Poke%&gt;%mutate(Generation=sample(Generation))
SST2&lt;- sum(dist^2)/721
SSW2&lt;-new%&gt;%group_by(Generation)%&gt;%select(Attack,Defense)%&gt;%
do(d=dist(.[2:3],&quot;euclidean&quot;))%&gt;%ungroup()%&gt;%
summarize(sum(d[[1]]^2)/151 + sum(d[[2]]^2)/100 + sum(d[[3]]^2)/135 + sum(d[[4]]^2)/107 + sum(d[[5]]^2)/156 + sum(d[[6]]^2)/72) %&gt;%pull
((SST2-SSW2)/5)/(SSW2/715)})
#p-value 
mean(Fs&gt;F_OB)</code></pre>
<pre><code>## [1] 0.307</code></pre>
<pre class="r"><code> {hist(Fs,prob=T); abline(v=F_OB, col=&quot;blue&quot;, add=T)}</code></pre>
<p><img src="/hugo-goa-demo/projects/Project2_files/figure-html/unnamed-chunk-3-1.png" width="768" style="display: block; margin: auto;" />
Null Hypothesis: The Attack and Defense does not differ across different Generations of Pokemon.
Alternative Hypothesis: The Attack and Defense differs for at least one Generation of Pokemon.
Observing the results of the PERMANOVA test, we can conclude that there is a significant difference in the distribution of Attack and Defense among the Generation of Pokemon. The calculated p-value=0.302 and the observed F(-3.732512) is greater than the null distribution of F.</p>
<ul>
<li><strong>3. Linear Regression</strong></li>
</ul>
<pre class="r"><code>#Center Means
Poke$Height_m_c&lt;-Poke$Height_m-mean(Poke$Height_m)
Poke$Weight_kg_c&lt;-Poke$Weight_kg-mean(Poke$Weight_kg)
#Linear Regression Model
fit&lt;- lm(Speed~Height_m_c*Weight_kg_c, data=Poke)
summary(fit)</code></pre>
<pre><code>##
## Call:
## lm(formula = Speed ~ Height_m_c * Weight_kg_c, data =
Poke)
##
## Residuals:
## Min 1Q Median 3Q Max
## -56.866 -20.374 -1.334 18.217 97.190
##
## Coefficients:
## Estimate Std. Error t value Pr(&gt;|t|)
## (Intercept) 67.4138610 1.0296513 65.473 &lt; 2e-16 ***
## Height_m_c 11.7151071 1.5430445 7.592 9.82e-14 ***
## Weight_kg_c 0.0001194 0.0151999 0.008 0.994
## Height_m_c:Weight_kg_c -0.0276571 0.0054672 -5.059
5.37e-07 ***
## ---
## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1
&#39; &#39; 1
##
## Residual standard error: 26.13 on 717 degrees of freedom
## Multiple R-squared: 0.08591, Adjusted R-squared: 0.08208
## F-statistic: 22.46 on 3 and 717 DF, p-value: 6.579e-14</code></pre>
<pre class="r"><code>#Plot
P &lt;- predict(fit,Poke)
ggplot(Poke,aes(Weight_kg_c, Speed))+geom_point()+geom_line(data=Poke, aes(y=P))</code></pre>
<p><img src="/hugo-goa-demo/projects/Project2_files/figure-html/unnamed-chunk-4-1.png" width="768" style="display: block; margin: auto;" /></p>
<pre class="r"><code>#Assumptions
library(lmtest)
library(sandwich)
resid&lt;-fit$residuals
fitv&lt;-fit$fitted.values
ggplot()+geom_point(aes(fitv,resid))+geom_hline(yintercept=0, color=&#39;blue&#39;)</code></pre>
<p><img src="/hugo-goa-demo/projects/Project2_files/figure-html/unnamed-chunk-4-2.png" width="768" style="display: block; margin: auto;" /></p>
<pre class="r"><code>ggplot()+geom_histogram(aes(resid), bins=20)</code></pre>
<p><img src="/hugo-goa-demo/projects/Project2_files/figure-html/unnamed-chunk-4-3.png" width="768" style="display: block; margin: auto;" /></p>
<pre class="r"><code>shapiro.test(resid)</code></pre>
<pre><code>## 
##  Shapiro-Wilk normality test
## 
## data:  resid
## W = 0.98637, p-value = 2.962e-06</code></pre>
<pre class="r"><code>#Robust Standard Errors
summary(fit)$coef[,1:2]</code></pre>
<pre><code>##                             Estimate  Std. Error
## (Intercept)            67.4138609852 1.029651285
## Height_m_c             11.7151071076 1.543044541
## Weight_kg_c             0.0001194111 0.015199935
## Height_m_c:Weight_kg_c -0.0276571256 0.005467239</code></pre>
<pre class="r"><code>coeftest(fit, vcov = vcovHC(fit))[,1:2]</code></pre>
<pre><code>##                             Estimate Std. Error
## (Intercept)            67.4138609852 1.09409429
## Height_m_c             11.7151071076 2.34763944
## Weight_kg_c             0.0001194111 0.02464291
## Height_m_c:Weight_kg_c -0.0276571256 0.01044836</code></pre>
<pre class="r"><code>#Proportion of the Variation Explained
(sum((Poke$Speed-mean(Poke$Speed))^2)-sum(fit$residuals^2))/sum((Poke$Speed-mean(Poke$Speed))^2)</code></pre>
<pre><code>## [1] 0.08590895</code></pre>
<pre class="r"><code>#Main Effects
fit2&lt;-lm(Speed ~ Height_m_c + Weight_kg_c, data=Poke)
summary(fit2)</code></pre>
<pre><code>##
## Call:
## lm(formula = Speed ~ Height_m_c + Weight_kg_c, data =
Poke)
##
## Residuals:
## Min 1Q Median 3Q Max
## -93.019 -19.910 -1.531 18.616 95.831
##
## Coefficients:
## Estimate Std. Error t value Pr(&gt;|t|)
## (Intercept) 65.71429 0.98982 66.390 &lt; 2e-16 ***
## Height_m_c 7.09214 1.26443 5.609 2.91e-08 ***
## Weight_kg_c -0.02172 0.01482 -1.465 0.143
## ---
## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1
&#39; &#39; 1
##
## Residual standard error: 26.58 on 718 degrees of freedom
## Multiple R-squared: 0.05328, Adjusted R-squared: 0.05065
## F-statistic: 20.21 on 2 and 718 DF, p-value: 2.903e-09</code></pre>
<pre class="r"><code>#Null Model
NFit&lt;-lm(Speed ~ Height_m_c, data=Poke)
summary(NFit)</code></pre>
<pre><code>##
## Call:
## lm(formula = Speed ~ Height_m_c, data = Poke)
##
## Residuals:
## Min 1Q Median 3Q Max
## -84.065 -20.365 -1.376 18.598 96.368
##
## Coefficients:
## Estimate Std. Error t value Pr(&gt;|t|)
## (Intercept) 65.7143 0.9906 66.337 &lt; 2e-16 ***
## Height_m_c 5.8668 0.9492 6.181 1.07e-09 ***
## ---
## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1
&#39; &#39; 1
##
## Residual standard error: 26.6 on 719 degrees of freedom
## Multiple R-squared: 0.05045, Adjusted R-squared: 0.04913
## F-statistic: 38.2 on 1 and 719 DF, p-value: 1.068e-09</code></pre>
<p>When height and weight of the Pokemon are 0, the Speed is 67.4138610. For every meter the height increases, the speed increases by 11.7151071 while holding weight constant. For every kilogram of weight , the speed increases by 0.0001194 while holding the height constant. According to the graphs and hypothesis tests, the assumption of normality, linearity, and homoskedasticity were not met. Compared to the standard errors, the robust standard errors held a greater value. This specific model explains for 0.08590895 of variation.</p>
<ul>
<li><strong>4. Regression Model with Interaction</strong></li>
</ul>
<pre class="r"><code>samp_dist&lt;-replicate(5000, {
  boot_dat&lt;-Poke[sample(nrow(Poke),replace=TRUE),]
  fit3&lt;-lm(Speed ~ Height_m_c * Weight_kg_c,data=boot_dat)
  coef(fit3)
  })
samp_dist%&gt;%t%&gt;%as.data.frame%&gt;%summarize_all(sd)</code></pre>
<pre><code>## (Intercept) Height_m_c Weight_kg_c
Height_m_c:Weight_kg_c
## 1 1.076039 2.352995 0.02287056 0.01000652</code></pre>
<p>Bootstrap errors are less than the robust standard errors but greater than the original standard errors.</p>
<ul>
<li><strong>5. Logistic Regression</strong></li>
</ul>
<pre class="r"><code>#Logistic Regression
fit4&lt;-glm(isLegendary~Height_m + Weight_kg, data=Poke, family=binomial(link=&quot;logit&quot;))
coeftest(fit4)</code></pre>
<pre><code>##
## z test of coefficients:
##
## Estimate Std. Error z value Pr(&gt;|z|)
## (Intercept) -3.7944328 0.2642118 -14.3613 &lt; 2.2e-16 ***
## Height_m 0.1733540 0.1343509 1.2903 0.1969
## Weight_kg 0.0089135 0.0016852 5.2892 1.228e-07 ***
## ---
## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1
&#39; &#39; 1</code></pre>
<pre class="r"><code>#Coefficients
exp(coef(fit4))</code></pre>
<pre><code>## (Intercept)    Height_m   Weight_kg 
##  0.02249566  1.18928708  1.00895333</code></pre>
<pre class="r"><code>#Confusion Matrix
Poke$predicted&lt;-predict(fit4, data=Poke, type = &quot;response&quot;)
table(predict=as.numeric(Poke$predicted&gt;.5),truth=Poke$isLegendary)%&gt;%addmargins</code></pre>
<pre><code>##        truth
## predict FALSE TRUE Sum
##     0     670   40 710
##     1       5    6  11
##     Sum   675   46 721</code></pre>
<pre class="r"><code>#Accuracy
(6+670)/721</code></pre>
<pre><code>## [1] 0.9375867</code></pre>
<pre class="r"><code>#Sensitivity(TPR)
6/46</code></pre>
<pre><code>## [1] 0.1304348</code></pre>
<pre class="r"><code>#Specificity(TNR)
670/675</code></pre>
<pre><code>## [1] 0.9925926</code></pre>
<pre class="r"><code>#Precision(PPV)
6/11</code></pre>
<pre><code>## [1] 0.5454545</code></pre>
<pre class="r"><code>#Plot
library(plotROC)
ggplot(Poke,aes(Height_m,predicted,color=Weight_kg))+geom_line()</code></pre>
<p><img src="/hugo-goa-demo/projects/Project2_files/figure-html/unnamed-chunk-6-1.png" width="768" style="display: block; margin: auto;" /></p>
<pre class="r"><code>ROCplot&lt;-ggplot(Poke)+geom_roc(aes(d=isLegendary,m=predicted), n.cuts=0)+
  geom_segment(aes(x=0,xend=1,y=0,yend=1),lty=2)
ROCplot</code></pre>
<p><img src="/hugo-goa-demo/projects/Project2_files/figure-html/unnamed-chunk-6-2.png" width="768" style="display: block; margin: auto;" /></p>
<pre class="r"><code>#AUC
calc_auc(ROCplot)</code></pre>
<pre><code>##   PANEL group       AUC
## 1     1    -1 0.7764251</code></pre>
<pre class="r"><code>#CV
class_diag&lt;-function(probs,truth){

tab&lt;-table(factor(probs&gt;.5,levels=c(&quot;FALSE&quot;,&quot;TRUE&quot;)),truth)
acc=sum(diag(tab))/sum(tab)
sens=tab[2,2]/colSums(tab)[2]
spec=tab[1,1]/colSums(tab)[1]
ppv=tab[2,2]/rowSums(tab)[2]

if(is.numeric(truth)==FALSE &amp; is.logical(truth)==FALSE) truth&lt;-as.numeric(truth)-1

ord&lt;-order(probs, decreasing=TRUE)
probs &lt;- probs[ord]; truth &lt;- truth[ord]

TPR=cumsum(truth)/max(1,sum(truth)) 
FPR=cumsum(!truth)/max(1,sum(!truth))

dup&lt;-c(probs[-1]&gt;=probs[-length(probs)], FALSE)
TPR&lt;-c(0,TPR[!dup],1); FPR&lt;-c(0,FPR[!dup],1)

n &lt;- length(TPR)
auc&lt;- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )

data.frame(acc,sens,spec,ppv,auc)
}

set.seed(1234)
k=10

data1&lt;-Poke[sample(nrow(Poke)),]
folds&lt;-cut(seq(1:nrow(Poke)),breaks=k,labels=F)

diags&lt;-NULL
for(i in 1:k){
train&lt;-data1[folds!=i,]
test&lt;-data1[folds==i,]
truth&lt;-test$isLegendary
fit6&lt;- glm(isLegendary~Height_m + Weight_kg,data=Poke,family=binomial(link=&quot;logit&quot;))
probs&lt;- predict(fit6, newdata=test, type=&quot;response&quot;)
diags&lt;-rbind(diags,class_diag(probs,truth))}

apply(diags,2,mean)</code></pre>
<pre><code>##       acc      sens      spec       ppv       auc 
## 0.9376142 0.1375000 0.9926245       NaN 0.7738906</code></pre>
<ul>
<li><strong>6. Lasso Regression</strong></li>
</ul>
<pre class="r"><code>library(glmnet)
y&lt;-as.matrix(Poke$isLegendary)
x&lt;-Poke%&gt;%dplyr::select(-Type_1, -Name, -isLegendary, -Name,-Number,-Generation,-hasGender,-Height_m_c,-Weight_kg_c,-predicted)%&gt;%mutate_all(scale)%&gt;%as.matrix
cv&lt;-cv.glmnet(x,y,family=&quot;binomial&quot;)
lasso&lt;-glmnet(x,y,family=&quot;binomial&quot;,lambda=cv$lambda.1se)
coef(lasso)</code></pre>
<pre><code>## 7 x 1 sparse Matrix of class &quot;dgCMatrix&quot;
##                     s0
## (Intercept) -3.5303840
## HP           0.2426111
## Attack       0.1467779
## Defense      0.4929892
## Speed        0.9019625
## Height_m     .        
## Weight_kg    0.4373606</code></pre>
<pre class="r"><code>set.seed(1234)
k=10
 
data1&lt;-Poke[sample(nrow(Poke)),]
folds&lt;-cut(seq(1:nrow(Poke)),breaks=k,labels=F)
 
diags2&lt;-NULL
for(i in 1:k){
  train2&lt;-data1[folds!=i,]
  test2&lt;-data1[folds==i,]
  truth2&lt;-test$isLegendary
  fit7&lt;- glm(isLegendary~HP+Attack+Defense+Speed+Height_m+Weight_kg,data=Poke,family=binomial(link=&quot;logit&quot;))
  probs2&lt;- predict(fit7, newdata=test, type=&quot;response&quot;)
  diags2&lt;-rbind(diags2,class_diag(probs2,truth2))}</code></pre>
<p>For this lasso regression, the categorical variables of Name, type of Pokemon, Number, isLegendary, Gender, and Generation were all dropped. The numerical values including the HP, Attack, Defense, Height, Weight and Speed were retained. AUC is less than one indicating that these numerical variables are not great predictors in whether or not a Pokemon is Legendary.</p>
<p>Note that the <code>echo = FALSE</code> parameter was added to the code chunk to prevent printing of the R code that generated the plot.</p>
</div>
